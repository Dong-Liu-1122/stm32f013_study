; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\main.o --asm_dir=.\ --list_dir=.\ --depend=.\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I.\RTE\_Target_1 -IC:\Users\18811\Documents\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=529 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\main.crf ..\User\src\Main.c]
                          THUMB

                          AREA ||i.Hardware_AllInit||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Hardware_AllInit PROC
;;;43     
;;;44     void Hardware_AllInit(void)
000000  b510              PUSH     {r4,lr}
;;;45     {
;;;46     	
;;;47     	Bsp_LedInit();
000002  f7fffffe          BL       Bsp_LedInit
;;;48     	
;;;49     
;;;50     	
;;;51     	
;;;52     	
;;;53     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);	// 设置中断优先级分组2
000006  f44f60a0          MOV      r0,#0x500
00000a  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;54     	delay_init();	    	 		//延时函数初始化	  
00000e  f7fffffe          BL       delay_init
;;;55     			  			//初始化与LED连接的硬件接口
;;;56     //	Usart_Init(USART1, 9600);		//串口1初始化,用于调试信息输出
;;;57     	uart_init(1, 9600);
000012  f44f5116          MOV      r1,#0x2580
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       uart_init
;;;58     //	printf (" \r\n mcu enter main \r\n");
;;;59     	
;;;60     //	stack_test();
;;;61     //	heap_test();
;;;62     //	pack_test();
;;;63     //	macro_define_test();
;;;64     //	cpu_mem_endian();
;;;65     	
;;;66     	
;;;67     #ifdef ADC_FUNC_TEST
;;;68     	Adc_Init();
;;;69     	App_AdcTest();
;;;70     	
;;;71     #endif	//ADC_FUNC_TEST
;;;72     	
;;;73     #ifdef TIMER_FUNC_TEST
;;;74     	timer_init(3);
;;;75     #endif
;;;76     
;;;77     #ifdef EXTI_FUNC_TEST
;;;78     	exti_init(0);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       exti_init
;;;79     #endif	//EXTI_FUNC_TEST
;;;80     
;;;81     #if SPI_COMM_MODE
;;;82     	#ifdef HARD_SPI_COMM
;;;83     	spi_master_init(1);
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       spi_master_init
;;;84     	#ifdef OLED_FUNC_TEST
;;;85     	oled_init();
000028  f7fffffe          BL       oled_init
;;;86     	oled_dis_logo();
00002c  f7fffffe          BL       oled_dis_logo
;;;87     //	oled_dis_picture(0, 0, 128, 7, bmp_buff);
;;;88     //	oled_dis_num(60, 4, 1314, 4, 16);
;;;89     //	oled_dis_one_char(5, 2, 'A');
;;;90     //	oled_dis_one_char(12, 2, 'B');
;;;91     //	oled_dis_one_char(129, 2, 'B');
;;;92     //	oled_dis_chinese(33,1,0);
;;;93     //	oled_dis_chinese(53,1,1);
;;;94     //	oled_dis_chinese(73,1,2);
;;;95     //	oled_dis_chinese(93,1,3);
;;;96     //	oled_dis_chinese(33,5,4);
;;;97     //	oled_dis_chinese(53,5,5);
;;;98     //	oled_dis_chinese(73,5,6);
;;;99     //	oled_dis_chinese(50, 3, 8);
;;;100    //	oled_dis_chinese(80, 3, 9);
;;;101    	#endif
;;;102    	Flash_TestDataInit();
000030  f7fffffe          BL       Flash_TestDataInit
;;;103    	ulFlashIdVal = spi_flash_read_id();
000034  f7fffffe          BL       spi_flash_read_id
000038  4908              LDR      r1,|L1.92|
00003a  6008              STR      r0,[r1,#0]  ; ulFlashIdVal
;;;104    	printf("Hard --1 spi flash val is 0x%0X \r\n", ulFlashIdVal);
00003c  4608              MOV      r0,r1
00003e  6801              LDR      r1,[r0,#0]  ; ulFlashIdVal
000040  a007              ADR      r0,|L1.96|
000042  f7fffffe          BL       __2printf
;;;105    	ulFlashIdVal = spi_flash_read_id();
000046  f7fffffe          BL       spi_flash_read_id
00004a  4904              LDR      r1,|L1.92|
00004c  6008              STR      r0,[r1,#0]  ; ulFlashIdVal
;;;106    	printf("Hard --2 Spi flash val is 0x%0X \r\n", ulFlashIdVal);
00004e  4608              MOV      r0,r1
000050  6801              LDR      r1,[r0,#0]  ; ulFlashIdVal
000052  a00c              ADR      r0,|L1.132|
000054  f7fffffe          BL       __2printf
;;;107    	#endif	//HARD_SPI_COMM
;;;108    #else
;;;109    	#ifdef SOFT_SPI_COMM
;;;110    	Spi_GpioInit();
;;;111    	Flash_TestDataInit();
;;;112    	
;;;113    	ulFlashIdVal = Flash_ReadJEDECID();
;;;114    	printf("Spi flash val is 0x%0X \r\n", ulFlashIdVal);
;;;115    	
;;;116    //	W25_WriteReadBytes();
;;;117    //	W25_CircleWriteRead(0x01, 0x00, g_WriteData, g_DataTmpBuffer, 256);	//flash循环读写测试
;;;118    	#endif	//SOFT_SPI_COMM
;;;119    #endif	//SPI_COMM_MODE	
;;;120    
;;;121    #ifdef I2C_HTU_TEST
;;;122    	Htu_Init();
;;;123    	ee_at24cxx_init();
;;;124    #endif
;;;125    }
000058  bd10              POP      {r4,pc}
;;;126    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      ulFlashIdVal
                  |L1.96|
000060  48617264          DCB      "Hard --1 spi flash val is 0x%0X \r\n",0
000064  202d2d31
000068  20737069
00006c  20666c61
000070  73682076
000074  616c2069
000078  73203078
00007c  25305820
000080  0d0a00  
000083  00                DCB      0
                  |L1.132|
000084  48617264          DCB      "Hard --2 Spi flash val is 0x%0X \r\n",0
000088  202d2d32
00008c  20537069
000090  20666c61
000094  73682076
000098  616c2069
00009c  73203078
0000a0  25305820
0000a4  0d0a00  
0000a7  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;127    
;;;128    int main(void)
000000  f7fffffe          BL       Hardware_AllInit
;;;129    {	
;;;130    	Hardware_AllInit();
;;;131    	
;;;132    #ifdef DEBUG_ENABLE
;;;133    	printk("Using Usart1 Output Debuging Infomation\r\n");
000004  a013              ADR      r0,|L2.84|
000006  f7fffffe          BL       __2printf
;;;134    #endif
;;;135    	
;;;136    	while(1)
00000a  e021              B        |L2.80|
                  |L2.12|
;;;137    	{
;;;138    		Sys_DelayUs(1000);
00000c  f44f707a          MOV      r0,#0x3e8
000010  f7fffffe          BL       Sys_DelayUs
;;;139    		Sys_DelayUs(1000);
000014  f44f707a          MOV      r0,#0x3e8
000018  f7fffffe          BL       Sys_DelayUs
;;;140    		Sys_DelayUs(1000);
00001c  f44f707a          MOV      r0,#0x3e8
000020  f7fffffe          BL       Sys_DelayUs
;;;141    		Sys_DelayUs(1000);
000024  f44f707a          MOV      r0,#0x3e8
000028  f7fffffe          BL       Sys_DelayUs
;;;142    //		Bsp_LedTest(500);
;;;143    		
;;;144    	#ifdef ADC_FUNC_TEST
;;;145    		Adc_Init();
;;;146    		App_AdcTest();
;;;147    		
;;;148    	#endif	//ADC_FUNC_TEST
;;;149    
;;;150    #if SPI_COMM_MODE		
;;;151    	#ifdef 	HARD_SPI_COMM
;;;152    		ulFlashIdVal = Flash_ReadJEDECID();
00002c  f7fffffe          BL       Flash_ReadJEDECID
000030  4913              LDR      r1,|L2.128|
000032  6008              STR      r0,[r1,#0]  ; ulFlashIdVal
;;;153    		printf(" hard spi flash val is 0x%0X \r\n", ulFlashIdVal);
000034  4608              MOV      r0,r1
000036  6801              LDR      r1,[r0,#0]  ; ulFlashIdVal
000038  a012              ADR      r0,|L2.132|
00003a  f7fffffe          BL       __2printf
;;;154    		W25_WriteReadBytes();
00003e  f7fffffe          BL       W25_WriteReadBytes
;;;155    
;;;156    	#endif	//HARD_SPI_COMM	
;;;157    #else	
;;;158    	#ifdef SOFT_SPI_COMM	
;;;159    		ulFlashIdVal = Flash_ReadJEDECID();
;;;160    		printf(" soft spi flash val is 0x%0X \r\n", ulFlashIdVal);
;;;161    		W25_WriteReadBytes();
;;;162    	#endif	//SOFT_SPI_COM
;;;163    	
;;;164    #endif	//SPI_COMM_MODE
;;;165    
;;;166    #ifdef I2C_HTU_TEST
;;;167    	Htu_Display();
;;;168    	ee_at24cxx_test();
;;;169    #endif
;;;170    
;;;171    #ifdef UART_FUNC_TEST
;;;172    //	uart_test();
;;;173    #endif
;;;174    
;;;175    #ifdef TIMER_FUNC_TEST
;;;176    	timer_test();
;;;177    #endif
;;;178    
;;;179    	printf("Main is ruinning\r\n");
000042  a018              ADR      r0,|L2.164|
000044  f7fffffe          BL       __2printf
;;;180    //	Bsp_LedTest(300);
;;;181    //	sprintf_test();	
;;;182    //	strcpy_test();
;;;183    //	memcmp_test();
;;;184    //  strcmp_test();
;;;185    
;;;186    		delay_ms(500);
000048  f44f70fa          MOV      r0,#0x1f4
00004c  f7fffffe          BL       delay_ms
                  |L2.80|
000050  e7dc              B        |L2.12|
;;;187    		
;;;188    //	if (USART_RX_STA)
;;;189    //	{
;;;190    //		printf("mcu will soft reset\r\n");
;;;191    //		NVIC_SystemReset();
;;;192    //		printf("mcu reset ok\r\n");
;;;193    //	}
;;;194    		
;;;195    	}
;;;196    }
;;;197    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
000054  5573696e          DCB      "Using Usart1 Output Debuging Infomation\r\n",0
000058  67205573
00005c  61727431
000060  204f7574
000064  70757420
000068  44656275
00006c  67696e67
000070  20496e66
000074  6f6d6174
000078  696f6e0d
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L2.128|
                          DCD      ulFlashIdVal
                  |L2.132|
000084  20686172          DCB      " hard spi flash val is 0x%0X \r\n",0
000088  64207370
00008c  6920666c
000090  61736820
000094  76616c20
000098  69732030
00009c  78253058
0000a0  200d0a00
                  |L2.164|
0000a4  4d61696e          DCB      "Main is ruinning\r\n",0
0000a8  20697320
0000ac  7275696e
0000b0  6e696e67
0000b4  0d0a00  
0000b7  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  ulFlashIdVal
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
