; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\drvtimer.o --asm_dir=.\ --list_dir=.\ --depend=.\drvtimer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I.\RTE\_Target_1 -IC:\Users\Administrator\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=529 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\drvtimer.crf ..\Driver\src\drvtimer.c]
                          THUMB

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;95     
;;;96     void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98     	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
000002  2101              MOVS     r1,#1
000004  4815              LDR      r0,|L1.92|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b328              CBZ      r0,|L1.88|
;;;99     	{
;;;100    		g_timer3_tick++;
00000c  4814              LDR      r0,|L1.96|
00000e  8800              LDRH     r0,[r0,#0]  ; g_timer3_tick
000010  1c40              ADDS     r0,r0,#1
000012  4913              LDR      r1,|L1.96|
000014  8008              STRH     r0,[r1,#0]
;;;101    		if ((g_timer3_tick % 20) == 0)
000016  4608              MOV      r0,r1
000018  8800              LDRH     r0,[r0,#0]  ; g_timer3_tick
;;;102    		{
;;;103    		//	printf("the t vale is %d\n",t);		
;;;104    		}
;;;105    		if (g_timer3_tick == 4999)
00001a  4608              MOV      r0,r1
00001c  8800              LDRH     r0,[r0,#0]  ; g_timer3_tick
00001e  f2413187          MOV      r1,#0x1387
000022  4288              CMP      r0,r1
000024  d114              BNE      |L1.80|
;;;106    		{
;;;107    			t++;
000026  480f              LDR      r0,|L1.100|
000028  8800              LDRH     r0,[r0,#0]  ; t
00002a  1c40              ADDS     r0,r0,#1
00002c  490d              LDR      r1,|L1.100|
00002e  8008              STRH     r0,[r1,#0]
;;;108    			g_timer3_tick = 0;
000030  2000              MOVS     r0,#0
000032  490b              LDR      r1,|L1.96|
000034  8008              STRH     r0,[r1,#0]
;;;109    			Bsp_LedToggle(t);
000036  480b              LDR      r0,|L1.100|
000038  8800              LDRH     r0,[r0,#0]  ; t
00003a  f7fffffe          BL       Bsp_LedToggle
;;;110    			if (t == 65535)
00003e  4809              LDR      r0,|L1.100|
000040  8800              LDRH     r0,[r0,#0]  ; t
000042  f64f71ff          MOV      r1,#0xffff
000046  4288              CMP      r0,r1
000048  d102              BNE      |L1.80|
;;;111    			{
;;;112    				t = 0;
00004a  2000              MOVS     r0,#0
00004c  4905              LDR      r1,|L1.100|
00004e  8008              STRH     r0,[r1,#0]
                  |L1.80|
;;;113    			}
;;;114    		}
;;;115    		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
000050  2101              MOVS     r1,#1
000052  4802              LDR      r0,|L1.92|
000054  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.88|
;;;116    	}
;;;117    }
000058  bd10              POP      {r4,pc}
;;;118    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      0x40000400
                  |L1.96|
                          DCD      g_timer3_tick
                  |L1.100|
                          DCD      t

                          AREA ||i.timer_config||, CODE, READONLY, ALIGN=2

                  timer_config PROC
;;;19     //---------------------------------------------------------------------------------------------------------------------------------------------
;;;20     static void timer_config(uint8_t timer_no, uint16_t timer_arr, uint16_t timer_psc)
000000  b5fe              PUSH     {r1-r7,lr}
;;;21     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;22     	TIM_TimeBaseInitTypeDef timer_init_config;
;;;23     	
;;;24     	if (timer_no == 3)
000008  2e03              CMP      r6,#3
00000a  d110              BNE      |L2.46|
;;;25     	{
;;;26     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;27     		
;;;28     		timer_init_config.TIM_Period 				= timer_arr;	//自动重装载寄存器数值
000014  f8ad4004          STRH     r4,[sp,#4]
;;;29     		timer_init_config.TIM_Prescaler 			= timer_psc;	//时钟频率除数预分频数值
000018  f8ad5000          STRH     r5,[sp,#0]
;;;30     		timer_init_config.TIM_ClockDivision 		= TIM_CKD_DIV1;	//时钟分割
00001c  2000              MOVS     r0,#0
00001e  f8ad0006          STRH     r0,[sp,#6]
;;;31     		timer_init_config.TIM_CounterMode 			= TIM_CounterMode_Up;	//向上计数方式
000022  f8ad0002          STRH     r0,[sp,#2]
;;;32     		//timer_init_config.TIM_RepetitionCounter 	= 0x0000;//高级定时器使用
;;;33     		TIM_TimeBaseInit(TIM3, &timer_init_config);
000026  4669              MOV      r1,sp
000028  4801              LDR      r0,|L2.48|
00002a  f7fffffe          BL       TIM_TimeBaseInit
                  |L2.46|
;;;34     	}
;;;35     }
00002e  bdfe              POP      {r1-r7,pc}
;;;36     
                          ENDP

                  |L2.48|
                          DCD      0x40000400

                          AREA ||i.timer_init||, CODE, READONLY, ALIGN=2

                  timer_init PROC
;;;71     //---------------------------------------------------------------------------------------------------------------------------------------------
;;;72     void timer_init(uint8_t timer_no)
000000  b510              PUSH     {r4,lr}
;;;73     {
000002  4604              MOV      r4,r0
;;;74     	if (timer_no == 3)
000004  2c03              CMP      r4,#3
000006  d10d              BNE      |L3.36|
;;;75     	{
;;;76     		timer_config(timer_no, 4999, 7199);//计数满载5000 = 500ms;计数频率:72M/7200=10KHz
000008  f641421f          MOV      r2,#0x1c1f
00000c  f2413187          MOV      r1,#0x1387
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       timer_config
;;;77     		timer_nvic_config(timer_no);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       timer_nvic_config
;;;78     		
;;;79     		TIM_Cmd(TIM3, ENABLE);//开启定时器
00001c  2101              MOVS     r1,#1
00001e  4803              LDR      r0,|L3.44|
000020  f7fffffe          BL       TIM_Cmd
                  |L3.36|
;;;80     	}
;;;81     	
;;;82     	g_timer3_tick = 0;
000024  2000              MOVS     r0,#0
000026  4902              LDR      r1,|L3.48|
000028  8008              STRH     r0,[r1,#0]
;;;83     }
00002a  bd10              POP      {r4,pc}
;;;84     
                          ENDP

                  |L3.44|
                          DCD      0x40000400
                  |L3.48|
                          DCD      g_timer3_tick

                          AREA ||i.timer_nvic_config||, CODE, READONLY, ALIGN=2

                  timer_nvic_config PROC
;;;45     //---------------------------------------------------------------------------------------------------------------------------------------------
;;;46     static void timer_nvic_config(uint8_t timer_no)
000000  b538              PUSH     {r3-r5,lr}
;;;47     {
000002  4604              MOV      r4,r0
;;;48     	NVIC_InitTypeDef nvic_init_config;
;;;49     	
;;;50     	if (timer_no == 3)
000004  2c03              CMP      r4,#3
000006  d113              BNE      |L4.48|
;;;51     	{
;;;52     		//中断优先级 NVIC 设置
;;;53     		nvic_init_config.NVIC_IRQChannel 						= TIM3_IRQn; //TIM3 中断
000008  201d              MOVS     r0,#0x1d
00000a  f88d0000          STRB     r0,[sp,#0]
;;;54     		nvic_init_config.NVIC_IRQChannelPreemptionPriority 		= 2; //先占优先级 2 级
00000e  2002              MOVS     r0,#2
000010  f88d0001          STRB     r0,[sp,#1]
;;;55     		nvic_init_config.NVIC_IRQChannelSubPriority 			= 3; //从优先级 3 级
000014  2003              MOVS     r0,#3
000016  f88d0002          STRB     r0,[sp,#2]
;;;56     		nvic_init_config.NVIC_IRQChannelCmd 					= ENABLE; //IRQ 通道被使能
00001a  2001              MOVS     r0,#1
00001c  f88d0003          STRB     r0,[sp,#3]
;;;57     		NVIC_Init(&nvic_init_config); //④初始化 NVIC 寄存器
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       NVIC_Init
;;;58     		
;;;59     		TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);//允许更新中断
000026  2201              MOVS     r2,#1
000028  4611              MOV      r1,r2
00002a  4802              LDR      r0,|L4.52|
00002c  f7fffffe          BL       TIM_ITConfig
                  |L4.48|
;;;60     	}
;;;61     }	
000030  bd38              POP      {r3-r5,pc}
;;;62     
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      0x40000400

                          AREA ||.data||, DATA, ALIGN=1

                  t
000000  0000              DCW      0x0000
